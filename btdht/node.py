# -*- coding: utf-8 -*-

import threading
import time
import logging

from .bencode import bencode
from .utils import random_trans_id, get_version, decode_nodes

logger = logging.getLogger(__name__)

class Node(object):
    """ Represent a DHT node """
    def __init__(self, host, port, _id):
        self._id = _id
        self.host = host
        self.port = port
        self.trans = {}
        self.tokens = {} # tokens generated remotely
        self.local_tokens = {} # tokens generated locally
        
        self.lock = threading.Lock()

        self.access_time = time.time()

    def __repr__(self):
        return repr("%s %s:%d" % (self._id.encode('hex'), self.host, self.port))

    def add_trans(self, name, info_hash=None):
        """ Generate and add new transaction """
        trans_id = random_trans_id()
        with self.lock:
            self.trans[trans_id] = {
                    "name": name,
                    "info_hash": info_hash,
                    "access_time": int(time.time())
            }
        return trans_id

    def delete_trans(self, trans_id):
        """ Delete specified transaction """
        with self.lock:
            del self.trans[trans_id]

    def add_token(self, info_hash, token):
        """ Adds a token for a given info hash as generated by this node """
        with self.lock:
            self.tokens[info_hash] = token

    def get_token(self, info_hash):
        """ Returns token for the info hash, if known """
        return self.tokens.get(info_hash,None)
            
    def delete_token(self, info_hash):
        """ Delete specified info hash's token """
        with self.lock:
            del self.tokens[info_hash]

    def add_local_token(self, info_hash, token):
        """ Adds a locally created token for a given info hash for this node """
        with self.lock:
            self.local_tokens[info_hash] = token

    def get_local_token(self, info_hash):
        """ Returns locally created token for the info hash, if known """
        return self.local_tokens.get(info_hash,None)
            
    def delete_local_token(self, info_hash):
        """ Delete specified info hash's locally created token """
        with self.lock:
            del self.local_tokens[info_hash]
            
    def update_access(self, unixtime=None):
        """ Update last access/modify time of this node """
        with self.lock:
            if unixtime:
                self.access_time = unixtime
            else:
                self.access_time = time.time()

    def _sendmessage(self, message, sock=None, trans_id=None, lock=None):
        """ Send and bencode constructed message to other node """
        message["v"] = get_version()
        if trans_id:
            message["t"] = trans_id
        encoded = bencode(message)
        if sock:
            if lock:
                with lock:
                    sock.sendto(encoded, (self.host, self.port))
            else:
                sock.sendto(encoded, (self.host, self.port))

    def send_protocol_error(self, msg, socket=None, trans_id=None, lock=None):
        """ Construct a protocol error message """
        message = {
            "y": "e",
            "e": [ 203, msg ]
            }
        logger.debug("protocol error msg to %s:%d, y:%s, t: %r, m: %s" % (
            self.host,
            self.port,
            message["y"],
            trans_id.encode("hex"),
            msg
        ))
        self._sendmessage(message, socket, trans_id=trans_id, lock=lock)
                
    def ping(self, socket=None, sender_id=None, lock=None):
        """ Construct query ping message """
        trans_id = self.add_trans("ping")
        message = {
            "y": "q",
            "q": "ping",
            "a": {
                "id": sender_id
            }
        }
        logger.debug("ping msg to %s:%d, y:%s, q:%s, t: %r" % (
            self.host, 
            self.port, 
            message["y"], 
            message["q"], 
            trans_id.encode("hex")
        ))
        self._sendmessage(message, socket, trans_id=trans_id, lock=lock)
        
    def pong(self, socket=None, trans_id=None, sender_id=None, lock=None):
        """ Construct reply message for ping """
        message = {
            "y": "r",
            "r": {
                "id": sender_id
            }
        }
        logger.debug("pong msg to %s:%d, y:%s, t: %r" % (
            self.host, 
            self.port, 
            message["y"], 
            trans_id.encode("hex")
        ))
        self._sendmessage(message, socket, trans_id=trans_id, lock=lock)
        
    def find_node(self, target_id, socket=None, sender_id=None, lock=None):
        """ Construct query find_node message """
        trans_id = self.add_trans("find_node")
        message = {
            "y": "q",
            "q": "find_node",
            "a": { 
                "id": sender_id,
                "target": target_id
            }
        }
        logger.debug("find_node msg to %s:%d, y:%s, q:%s, t: %r" % (
            self.host, 
            self.port, 
            message["y"], 
            message["q"], 
            trans_id.encode("hex")
        ))
        self._sendmessage(message, socket, trans_id=trans_id, lock=lock)

    def found_node(self, found_nodes, socket=None, trans_id=None, sender_id=None, lock=None):
        """ Construct reply message for find_node """

        message = {
            "y": "r",
            "r": {
                "id": sender_id,
                "nodes": found_nodes
            }
        }
        logger.debug("found_node msg to %s:%d, y:%s, t: %r" % (
            self.host, 
            self.port, 
            message["y"], 
            trans_id.encode("hex")
        ))
        self._sendmessage(message, socket, trans_id=trans_id, lock=lock)

    def get_peers(self, info_hash, socket=None, sender_id=None, lock=None):
        """ Construct query get_peers message """
        trans_id = self.add_trans("get_peers", info_hash)
        message = {
            "y": "q",
            "q": "get_peers",
            "a": { 
                "id": sender_id,
                "info_hash": info_hash
            }
        }
        logger.debug("get_peers msg to %s:%d, y:%s, q:%s, t: %r" % (
            self.host, 
            self.port, 
            message["y"], 
            message["q"], 
            trans_id.encode("hex")
        ))
        self._sendmessage(message, socket, trans_id=trans_id, lock=lock)

    def got_peers(self, token, values, nodes, socket=None, trans_id=None, sender_id=None, lock=None):
        """ Construct reply message for got_peers """

        if len(values) == 0:
            message = {
                "y": "r",
                "r": {
                    "id": sender_id,
                    "token": token,
                    "nodes": nodes
                }
            }
        else: # some peers holding the hash are known
            message = {
                "y": "r",
                "r": {
                    "id": sender_id,
                    "token": token,
                    "values": values
                }
            }
        logger.info("got_peers msg to %s:%d, y:%s, v: %s, n: %s, tok: %s, t: %r" % (
            self.host, 
            self.port, 
            message["y"],
            message["r"].get("values",None),
            decode_nodes(message["r"].get("nodes",None)),
            message["r"]["token"].encode("hex"),
            trans_id.encode("hex")
        ))
        self._sendmessage(message, socket, trans_id=trans_id, lock=lock)


    def announce_peer(self, token, info_hash, socket=None, sender_id=None, lock=None):
        """ Construct announce_peer message """
        trans_id = self.add_trans("announce_peer", info_hash)
        message = {
            "y":"q",
            "q":"announce_peer",
            "a": {
                "id": sender_id,
                "info_hash": info_hash,
                "implied_port": 1,  # XXX: port argument is ignored by default for sending the response
                "port": self.port,
                "token": token
            }
        }
        logger.debug("announce_peer msg to %s --> %s:%d, y:%s, q:%s, ih: %s, tok: %s, t: %r" % (
            self._id.encode("hex"),
            self.host,
            self.port,
            message["y"],
            message["q"],
            message["a"]["info_hash"].encode("hex"),
            message["a"]["token"].encode("hex"),
            trans_id.encode("hex")
        ))
        self._sendmessage(message, socket, trans_id=trans_id, lock=lock)
